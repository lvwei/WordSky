package com.eece496.webapp.jdbcdao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import javax.inject.Inject;
import javax.inject.Named;

import org.primefaces.model.DualListModel;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import com.eece496.webapp.dao.UserDAO;
import com.eece496.webapp.jdbcdao.mapper.AdminMapper;
import com.eece496.webapp.jdbcdao.mapper.StudentMapper;
import com.eece496.webapp.jdbcdao.mapper.TaMapper;
import com.eece496.webapp.pojo.Course;
import com.eece496.webapp.pojo.Student;
import com.eece496.webapp.pojo.Ta;
import com.eece496.webapp.pojo.User;

//@Named
public class UserJdbcDAO implements UserDAO {

	@Inject
	private JdbcTemplate jdbcTemplate;

	@Override
	public void addTa(Ta ta) {
		final String INSERT_SQL = "insert into my_test (name) values(?)";
		final String name = "Rob";

		KeyHolder keyHolder = new GeneratedKeyHolder();
		jdbcTemplate.update(new PreparedStatementCreator() {
			public PreparedStatement createPreparedStatement(
					Connection connection) throws SQLException {
				PreparedStatement ps = connection.prepareStatement(INSERT_SQL,
						new String[] { "id" });
				ps.setString(1, name);
				return ps;
			}
		}, keyHolder);
		// keyHolder.getKey() now contains the generated key
	}

	@Override
	public User getUser(String username, String password) {
		int userId = this.getUserId(username, password);
		if (userId <= 0) {
			return null;
		}
		int auth = this.getUserAuth(userId);
		if (auth == User.ADMIN) {
			return this.getAdmin(userId);
		} else if (auth == User.TA) {
			return this.getTa(userId);
		} else if (auth == User.STUDENT) {
			return this.getStudent(userId);
		}
		return null;
	}

	@Override
	public List<Ta> getTaListMarkCourse(int courseId) {
		List<Ta> taList = new LinkedList<Ta>();
		final String SQL_QUERY = "SELECT * FROM users, ta "
				+ "WHERE users.id = ta.id AND users.id IN ("
				+ "SELECT user_id FROM ta_marks_course "
				+ "WHERE course_id = ?" + ")";
		try {
			taList = this.jdbcTemplate.query(SQL_QUERY,
					new Object[] { courseId }, new TaMapper());
		} catch (Exception ex) {
		}
		return taList;
	}

	@Override
	public List<Student> getStudentListRegisterInCourse(int courseId) {
		List<Student> studentList = new LinkedList<Student>();
		final String SQL_QUERY = "SELECT * FROM users, students WHERE users.id = students.id AND users.id IN ( SELECT user_id FROM students_register_courses  WHERE course_id = ? )";
		try {
			studentList = this.jdbcTemplate.query(SQL_QUERY,
					new Object[] { courseId }, new StudentMapper());
		} catch (Exception ex) {
		}
		return studentList;
	}

	@Override
	public List<Student> getGroupStudent(int groupId) {
		List<Student> studentList = new LinkedList<Student>();
		final String SQL_QUERY = "SELECT * FROM users, students WHERE users.id = students.id AND users.id IN ( SELECT user_id FROM students_in_groups  WHERE group_id= ? )";
		try {
			studentList = this.jdbcTemplate.query(SQL_QUERY,
					new Object[] { groupId }, new StudentMapper());
		} catch (Exception ex) {
		}
		return studentList;
	}

	@Override
	public Ta getTaOfHolddate(int holddateId) {
		int userId = -1;
		final String SQL_QUERY = "select ta_id from hold_dates where id = ?";
		try {
			userId = this.jdbcTemplate.queryForInt(SQL_QUERY,
					new Object[] { holddateId });
		} catch (Exception ex) {
		}
		return this.getTa(userId);
	}

	@Override
	public Student getStudentOfHolddate(int holddateId) {
		int userId = -1;
		final String SQL_QUERY = "select student_id from hold_dates where id = ?";
		try {
			userId = this.jdbcTemplate.queryForInt(SQL_QUERY,
					new Object[] { holddateId });
		} catch (Exception ex) {
		}
		return this.getStudent(userId);
	}

	@Override
	public Student getAbsentStudentOfHolddate(int holddateId) {
		int userId = -1;
		final String SQL_QUERY = "select absent_student_id from hold_dates where id = ?";
		try {
			userId = this.jdbcTemplate.queryForInt(SQL_QUERY,
					new Object[] { holddateId });
		} catch (Exception ex) {
		}
		return this.getStudent(userId);
	}

	private int getUserId(String username, String password) {
		int userId = -1;
		final String SQL_QUERY = "select id from users where username LIKE ? and password LIKE ?";
		try {
			userId = this.jdbcTemplate.queryForInt(SQL_QUERY, new Object[] {
					username, password });
		} catch (Exception ex) {
		}
		return userId;
	}

	private int getUserAuth(int userId) {
		int auth = -1;
		final String SQL_QUERY = "select authorization from users where id = ?";
		try {
			auth = this.jdbcTemplate.queryForInt(SQL_QUERY,
					new Object[] { userId });
		} catch (Exception ex) {
		}
		return auth;
	}

	private User getAdmin(int userId) {
		User user = null;
		final String SQL_QUERY = "select * from users where id = ?";
		try {
			user = this.jdbcTemplate.queryForObject(SQL_QUERY,
					new Object[] { userId }, new AdminMapper());
		} catch (Exception ex) {
		}
		return user;
	}

	@Override
	public Ta getTa(int userId) {
		Ta ta = null;
		final String SQL_QUERY = "select * from users, ta where users.id = ? and users.id = ta.id";
		try {
			ta = this.jdbcTemplate.queryForObject(SQL_QUERY,
					new Object[] { userId }, new TaMapper());
		} catch (Exception ex) {
		}
		return ta;
	}

	@Override
	public Student getStudent(int userId) {
		Student student = null;
		final String SQL_QUERY = "select * from users, students where users.id = ? and users.id = students.id";
		try {
			student = this.jdbcTemplate.queryForObject(SQL_QUERY,
					new Object[] { userId }, new StudentMapper());
		} catch (Exception ex) {
		}
		return student;
	}


	@Override
	public void addTaMarksCourse(int taId, int courseId) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void addStudentRegisterCourse(int studentId, int courseId) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void addStudentInGroup(int studentId, int groupId) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void addStudent(Student student) {
		// TODO Auto-generated method stub
		
	}


}
