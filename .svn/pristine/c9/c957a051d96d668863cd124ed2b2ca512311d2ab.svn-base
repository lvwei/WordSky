package com.eece496.webapp.developdao;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.inject.Named;

import org.primefaces.model.DualListModel;

import com.eece496.webapp.dao.UserDAO;
import com.eece496.webapp.pojo.Admin;
import com.eece496.webapp.pojo.Course;
import com.eece496.webapp.pojo.Group;
import com.eece496.webapp.pojo.HoldDate;
import com.eece496.webapp.pojo.Section;
import com.eece496.webapp.pojo.Student;
import com.eece496.webapp.pojo.Subsection;
import com.eece496.webapp.pojo.Ta;
import com.eece496.webapp.pojo.User;

@Named
public class UserDevDAO implements UserDAO {
	
	@Override
	public User getUser(String username, String password){
		return new Admin();
	}
	public  DualListModel<Course>getCourses(int userId){		
		List<Course> randCourse=new ArrayList<Course>();
		randCourse.add(new Course("eece253T1"));
		randCourse.add(new Course("eece253T2"));
		randCourse.add(new Course("eece261T1"));
		randCourse.add(new Course("eece261T2"));
		return new DualListModel<Course>(new ArrayList<Course>(),randCourse);
	}
	
	
	public Course getCourse(int courseId){
		return new Course();
	}
	
	public List<Student>getStudent(int courseId){
		List<Student> randStudent=new ArrayList<Student>();
		for(int i=0;i<22;i++){
			String last="L"+Integer.toString(i);
			String first="F"+Integer.toString(i);
			String s="S"+Integer.toString(i);
		randStudent.add(new Student(last,first,s));
		}

		return randStudent;
	}
	
	public List<Student>getAbsentStudent(int courseId){
		List<Student> randStudent=new ArrayList<Student>();
		for(int i=0;i<2;i++){
			String last="L"+Integer.toString(i);
			String first="F"+Integer.toString(i);
			String s="S"+Integer.toString(i);
		randStudent.add(new Student(last,first,s));
		}

		return randStudent;
	}
	
	public  List<Ta>getTa(int courseId){
		List<Ta> randTa=new ArrayList<Ta>();
		for(int i=0;i<5;i++){
		randTa.add(new Ta());
		}

		return randTa;
	}
	
	@SuppressWarnings("deprecation")
	public  List<Section>getSection(int courseId){
		List<Section> randSection=new ArrayList<Section>();
		for(int i=0;i<2;i++){
			randSection.add(new Section());
			Date start=new Date();
			start.setHours(1+i);
			Date end=new Date();
			end.setHours(5+i);
			randSection.get(i).setStartTime(start);
			randSection.get(i).setEndTime(end);
		}

		return randSection;
	}
	
	
	public  List<Group>getGroup(int courseId){
		List<Group> randGroup=new ArrayList<Group>();


		return randGroup;
	}
	
	
	
	public  List<Student>getGroupStudent(int groupId){
		List<Student> a=new ArrayList<Student>();


		return a;
	}
	
	public  Course getCourseForTa(int taId){
		Course a=new Course();


		return a;
	}
	
	public  List<Group>getGroupOfSection(int sectionId){
		List<Group> randGroup=new ArrayList<Group>();


		return randGroup;
	}
	
	public  List<Group>getGroupOfSubsection(int subsectionId){
		List<Group> randGroup=new ArrayList<Group>();


		return randGroup;
	}
	
	public  List<HoldDate>getHolddageOfSubsection(int subsectionId){
		List<HoldDate> a=new ArrayList<HoldDate>();


		return a;
	}
	
	public  List<HoldDate>getHolddageOfSection(int sectionId){
		List<HoldDate> a=new ArrayList<HoldDate>();

		return a;
	}
	
	public  Ta getTaOfHolddate(int holddateId){
		Ta a=new Ta();

		return a;
	}
	
	public  Student getStudentOfHolddate(int holddateId){
		Student a=new Student();

		return a;
	}
	public  List<Subsection>getSubsection(int sectionId){
		List<Subsection>a=new ArrayList<Subsection>();


		return a;
	}

}
