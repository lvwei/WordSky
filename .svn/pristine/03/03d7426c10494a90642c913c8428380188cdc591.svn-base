package com.eece496.webapp.jdbcdao;

import static org.junit.Assert.*;

import java.util.List;

import javax.inject.Inject;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.eece496.webapp.dao.UserDAO;
import com.eece496.webapp.pojo.Student;
import com.eece496.webapp.pojo.Ta;
import com.eece496.webapp.pojo.User;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration({ "file:src/main/webapp/WEB-INF/spring/root-context.xml" })
public class UserJdbcDAOTest {

	@Inject
	private UserDAO userDao;

	@Test
	public void userExisted() {
		User user = this.userDao.getUser("TestAdmin", "TestAdmin");
		assertEquals("message", 1, user.getId());
	}

	@Test
	public void userNotExisted() {
		User user = null;
		try {
			user = this.userDao.getUser("TestAdmin", "Testadmin");
		} catch (Exception ex) {
			System.out.println("ex");
		}
		assertNull("message", user);
	}

	@Test
	public void taExisted() {
		Ta ta = (Ta) this.userDao.getUser("TestTa", "TestTa");
		assertEquals("message", 2, ta.getId());
		assertEquals("message", true,
				ta.getUsername().equalsIgnoreCase("testta"));
		assertEquals("message", true, ta.getPassword().equals("TestTa"));
		assertEquals("message", 2, ta.getAuthorization());
		assertEquals("message", true, ta.getStudentNumber().equals("40383091"));
	}

	@Test
	public void studentExisted() {
		Student student = (Student) this.userDao.getUser("Teststudent",
				"TestStudent");
		assertEquals("message", 3, student.getId());
		assertEquals("message", true,
				student.getUsername().equalsIgnoreCase("Teststudent"));
		assertEquals("message", true,
				student.getPassword().equals("TestStudent"));
		assertEquals("message", 3, student.getAuthorization());
		assertEquals("message", true,
				student.getStudentNumber().equals("40383092"));
	}

	@Test
	public void testGetTa() {
		List<Ta> taList = this.userDao.getTa(1);
		assertNotNull("message", taList);
		assertEquals("message", 2, taList.size());
	}

	@Test
	public void testGetTa2() {
		List<Ta> taList = this.userDao.getTa(3);
		assertNotNull("message", taList);
		assertEquals("message", 0, taList.size());
	}

	@Test
	public void testGetTa3() {
		List<Ta> taList = this.userDao.getTa(4);
		assertNotNull("message", taList);
		assertEquals("message", 1, taList.size());
	}

	@Test
	public void testGetStudent() {
		List<Student> studentList = this.userDao.getStudent(1);
		assertNotNull("message", studentList);
		assertEquals("message", 5, studentList.size());
	}

	@Test
	public void testGetStudent2() {
		List<Student> studentList = this.userDao.getStudent(3);
		assertNotNull("message", studentList);
		assertEquals("message", 2, studentList.size());
	}

	@Test
	public void testGetStudent3() {
		List<Student> studentList = this.userDao.getStudent(4);
		assertNotNull("message", studentList);
		assertEquals("message", 0, studentList.size());
	}
	
	@Test
	public void testGetGroupStudent() {
		List<Student> studentList = this.userDao.getGroupStudent(1);
		assertNotNull("message", studentList);
		assertEquals("message", 2, studentList.size());
		studentList = null;
		studentList = this.userDao.getGroupStudent(2);
		assertNotNull("message", studentList);
		assertEquals("message", 3, studentList.size());
	}
	
	@Test
	public void testGetTaOfHolddate(){
		Ta ta = this.userDao.getTaOfHolddate(1);
		assertNotNull("message", ta);
		assertEquals("message", 2, ta.getId());
		assertEquals("message", true, ta.getUsername().equalsIgnoreCase("testta"));
		ta = null;
		ta = this.userDao.getTaOfHolddate(2);
		assertNotNull("message", ta);
		assertEquals("message", 4, ta.getId());
		assertEquals("message", true, ta.getUsername().equalsIgnoreCase("testta2"));
	}
	
	@Test
	public void testGetStudentOfHolddate(){
		Student student = this.userDao.getStudentOfHolddate(1);
		assertNotNull("message", student);
		assertEquals("message", 6, student.getId());
		assertEquals("message", true, student.getUsername().equalsIgnoreCase("teststudent2"));
		student = null;
		student = this.userDao.getStudentOfHolddate(2);
		assertNotNull("message", student);
		assertEquals("message", 8, student.getId());
		assertEquals("message", true, student.getUsername().equalsIgnoreCase("teststudent4"));
	}
	
	@Test
	public void testGetAbsentStudentOfHolddate(){
		Student student = this.userDao.getAbsentStudentOfHolddate(2);
		assertNull("message", student);
		student = null;
		student = this.userDao.getAbsentStudentOfHolddate(1);
		assertNotNull("message", student);
		assertEquals("message", 8, student.getId());
		assertEquals("message", true, student.getUsername().equalsIgnoreCase("teststudent4"));
	}
}
